track,title,abstract,authors,type,doi-num,doi-address,video-link,supplemental-link
Lightning Talks,Lightning Talks Session 1,,Lina Battestilli; Jennifer Campbell; Kevin Lin,Session,,,,
Lightning Talks,LT #101: Automatic Grading for Program Tracing Exercises,"<p>Understanding how a programming construct executes is a prerequisite for coding. Tracing exercises are often used to help students develop accurate mental models of how different constructs execute. Besides asking students for the final result, a full tracing exercise, similarly to an instructor's white-board demo, checks whether students understand the execution flow and how the memory/output changes with each step of execution. Such exercises can be time-consuming to grade or set up. For paper-based full tracing exercises, once submitted, they represent the final state of the memory/output. It is time-consuming to infer whether students have traced each step correctly. For an auto-gradable quiz, if the questions are too specific (e.g. the value of a variable), they already reveal partially what the program will do. It takes time to set up auto-gradable questions that avoid this problem. We are developing a web-based system that allows instructors to set up auto-gradable full tracing exercises easily. Our approach is to augment pythontutor.com, a popular open-source code visualization system that graphically demonstrates the execution flow and memory/output changes of a complete program. Before demonstrating a step, the new system will prompt a student to determine which line is executed next and what changes happen in memory/output. The system will be auto-gradable, making it easy to deliver full tracing exercises. We will demonstrate implemented features, discuss future plans, and gather feedback from those present.</p>",Wei Jin,Sub,10.1145/3328778.3372561,,,
Lightning Talks,"LT #102: All Means All: Bringing Project-based, Approachable AI Curriculum to More High School Students through AI4ALL Open Learning","<p>Aimed at people interested in teaching AI to students of all backgrounds and others interested in broadening participation in AI, this lightning talk describes the thought process behind AI4ALL's online Open Learning curriculum, the first module of which was officially released in September 2019. AI4ALL Open Learning makes AI education free and approachable to groups that are otherwise excluded from the tech economy due to socioeconomic status, geographic location, access to resources, race, gender, and other factors. The module released in September is designed for high school students and requires no programming or Math experience. It centers around ""AI literacy"" - what AI is, how students are using it in their everyday lives, how they might in the future, and the ethics and social impacts of AI. It engages students through discussion with their classmates, their community, and their other classes, and it offers students opportunities to pursue AI projects that intersect with their interests. During the lightning talk, we will also discuss the next stage of development for the AI4ALL Open Learning curriculum: modules that build students' technical AI skills in the context of the students' interests and passions.</p>",Sarah Judd,Sub,10.1145/3328778.3372554,,,
Lightning Talks,LT #103: Student Alumni Networking,"<p>This lightning talk describes a pair of on-campus events and their possible effects on student retention and graduate employment rate. The Physics Department at St. Mary's College of Maryland has built a program to help its students prepare for the job market. This fall I replicated one part of this program in the computer science department with a two-hour networking event at which alumni answered questions as part of a panel and then participated in a speed dating type meet and greet with current students. In the future I would like to hold similar events while collecting data on how student's understanding of career opportunities change as a result of the event, and in the long term the difference in career type and employment rate. I would also like to test the effect of these events on student perception of diversity in the field of computer science. Faculty who might be interested in holding similar events and collecting data on their campus' or collaborating with the proposer to develop the study should email the proposer</p>",Ariel Webster,Sub,10.1145/3328778.3372560,https://doi.org/10.1145/3328778.3372560,,
Lightning Talks,LT #104: Make Your Escape: An Active Learning Approach,"<p>This lightning talk describes the use of escape rooms in Computer Science and Mathematics education. Escape rooms are games where players work collaboratively to solve a series of puzzles in order to achieve a goal within a limited time frame. Student created escape room puzzles are a novel way for students to foster and demonstrate their knowledge through non-traditional methods. This activity can be used in courses across the CS curriculum as well as in K-12 education. Students enjoy building the escape rooms, so they don't consider it a formal assessment and it promotes creativity and teamwork skills. Our presentation will cover the key elements in this process from formation of groups to acquiring traditional escape room elements as well as other resources that students use to create the puzzles. We will also discuss how we familiarized the students with escape rooms before the activity. We will give examples of some of the puzzles created by our CS students that included the history of computing, tracing computer code, designing algorithms, solving logic problems, binary numbers, decoding ASCII codes, encryption and sequence and series problems.</p>",Victoria Hong; Elana Reiser,Sub,10.1145/3328778.3372557,https://doi.org/10.1145/3328778.3372557,,
Lightning Talks,LT #105: Leveraging Industry Benchmarks to Teach Database Concepts,"<p>Databases have been a part of core curriculum in computer science for decades. Courses exist at both introductory and advanced levels and topics include data modeling and design, query optimization, and studying features of specific database platforms such as MySQL. Concepts such as normalization in relational databases, OLTP/OLAP are taught using assignments that are based on short synthetic examples. In this talk, we propose the use of open use industry benchmark kits (HammerDB), the Wisconsin benchmark, and/or TPC-defined industry benchmark to create ""close to real-world"" and engaging course modules. The use of benchmarks will not only offer new ways of teaching the existing topics but also allow extending the scope of current database courses to contemporary data management systems and big data technologies. Students will be exposed to a breadth of areas including database internals, performance optimization, schema design (real world schemas with ""large"" datasets), an insight into the underlying system and its performance, and exposure to ""what's possible"" with current hardware all under one course. The three benchmarks we discuss cover three different data management scenarios. TPC-[C/E] serves OLTP use-case, TPC-[H/DS] addresses OLAP while TPCx-BB supports a mix of OLAP and Big Data. We experimented with this idea by organizing two guest lectures on database benchmarks to a class of computer science students at Portland State University; and it was very well-received as evident from students' feedback. Through this proposal, we hope to invite interested faculty for further discussions so that it may develop into a multi-institutional endeavor.</p>",Dippy Aggarwal; Charles Winstead; Kristin Tufte,Sub,10.1145/3328778.3372562,https://doi.org/10.1145/3328778.3372562,,https://drive.google.com/open?id=18NfHEKixyyh8G3Hfwp9LPg-GRlIZzSOk
Lightning Talks,LT #106: Teaching with Program2Play: Using Programming Instructions to Play Games,"<p>Program2Play is a web-based initiative that teaches learners to program through gameplay. Program2Play games generally have two versions for each game. One game can be played by using a mouse or arrow keys, depending on the type of user interaction required. This version demonstrates the desired functionality of the game. The second game is identical to the first game except there are programming instructions missing from the first which the user must supply for the game to function correctly. The user can then test the programming instructions by playing the second version of the game and observing the results of the inserted instructions. Because learners code a small portion of a game, they can see the result of their efforts quickly in an exciting context. Also, by coding a subset of the game the sources of error are greatly reduced, enhancing the likelihood of a successful learning experience. The initial games target relatively simple, yet powerful instructions. For example, learners are asked to code the instruction that moves a bee in the game so that it avoids a dragonfly and reaches the honeycomb. The simplicity and power of an instruction like, <i>bee.x += value,</i> can be experienced in the context of an animation loop.</p><p>This pedagogical approach encourages experimentation with programming instructions. Program2Play is suited for beginning programmers and programmers who may need additional learning experiences or motivation. Program2Play can be used in high schools or to help remediate deficient programming skills for first-year students.</p>",Evelyn Stiller,Sub,10.1145/3328778.3372563,https://doi.org/10.1145/3328778.3372563,,
Lightning Talks,LT #107: Transitioning From Peer Instruction to POGIL with Guided Lecture Notes,"<p>There is overwhelming evidence that active learning is better than completely passive lecture. However, adoption of evidence-based teaching practices has been slow in part because creating new course materials is often a time-consuming and labor-intensive process. Inspired by prior work in the sciences, we describe our experiences deploying guided lecture notes to transition from peer instruction (10% of lecture time) to process oriented guided inquiry learning (POGIL, 50% of lecture time) over two offerings of data structures and algorithms in a large R1 university. In the first offering, we added metacognitive questions in the presentation speaker notes, providing additional scaffolding between pre-lecture reading and in-lecture peer instruction activities. At the beginning of each class session, we distributed guided lecture notes to students by printing the presentation speaker notes alongside lecture slide content. In this way, we were able to seamlessly integrate new supporting materials alongside lecture graphics and examples. In the second offering, we expanded guided lecture notes into POGIL worksheets by migrating most of the remaining passive lecture content to pre-lecture readings and consolidating lecture around three levels of process oriented guided inquiry: (1) metacognitive questions, (2) peer instruction activities scaffolded by the metacognitive questions, and (3) practice problems integrating multiple ideas. The resulting POGIL classroom leverages presentation software as a canvas for introducing problems with graphics and animations while structuring activities around active learning via process oriented guided inquiry.</p>",Kevin Lin,Sub,10.1145/3328778.3372565,https://doi.org/10.1145/3328778.3372565,,https://drive.google.com/open?id=1tN3Bby2vAGzfPRkMxAyu7Yryry8P7iuF
Lightning Talks,LT #108: Improving the Outcomes of Hispanics in AP Computer Science,"<p>This lightning talk describes a proof of concept research project funded by a Google CS Education (CS-ER) Research grant. The project focuses on pedagogical interventions aimed at improving the outcomes of English Language Learners (ELLs) in Advanced Placement Computer Science. The research underway examines the use of Sheltered Instruction (SI), a model from English as a Second Language (ESL) and bilingual education, used in mainstream classrooms across other content areas, in the AP CSA and AP CSP classroom. Strategies and pedagogy from the Sheltered Instruction model are being infused into AP Computer Science curriculum and used in classrooms in participating districts. The districts have been selected to include a range of ELLs and native English speakers. The impact of this approach will be measured by comparing the AP CS exam scores of students in the participating districts with the national and state AP CS exam scores. This lightning talk will focus on the pedagogy development which has taken place and preliminary findings from two cohorts of AP CS and AP CSA teachers, in particular the impact and changes to the teacher's development of CS education lessons and in-class lesson delivery. The project is an interdisciplinary collaboration between faculty from the School of Computer Science and the School of Curriculum and Teaching.</p>",Mayra Bachrach; Patricia Morreale; Gail Verdi,Sub,10.1145/3328778.3372567,https://doi.org/10.1145/3328778.3372567,https://www.youtube.com/watch?v=l9TN9o2QnBQ&t=11s,
Lightning Talks,LT #109: A Study Away Summer Program Addressing Accessibility,"<p>Accessibility is an important part of designing and building products, yet many computer science students are not receiving any instruction on how to design for accessibility. Teach Access was founded in 2015 as a joint endeavor between industry and academia to address this issue. As part of this larger initiative to include accessibility topics within the field of computer science, we discuss our experiences organizing and participating in a summer study away program that brought together faculty and students from seven universities to spend a week visiting and learning from accessibility experts at a variety of technology companies within Silicon Valley. This second annual offering of this study away program allowed the participating students to learn more about accessibility, participate in accessibility design challenges, and increase discussion and awareness about disabilities and accessibility. We believe this program to be transformational for the students who participate; and are exploring ways to expand the program offerings to reach even more students.</p>",Kendra Walther; Kate Sonka,Sub,10.1145/3328778.3372569,https://doi.org/10.1145/3328778.3372569,,
Lightning Talks,LT #110: Computational Thinking in Teacher Education,"<p>Teacher education programs are beginning to acknowledge the important role they play in preparing teachers to support students in the area of STEM, coding, Computational Thinking and robotics. As a result, new courses are being developed that connect research, pedagogy and technology within this nascent field. An example of this is Western University's Computational Thinking in Mathematics and Science Education course, which has been offered in year one of the Bachelor of Education program since 2015 and is part of the STEM cohort. Research has been conducted during each iteration of the course and subsequent adjustments were made in order to better serve the preservice teachers as well as respond to new insights in the field. The preservice teachers have completed at least one university degree, mostly in the areas of science or mathematics, prior to beginning their Bachelor of Education degree. This lightning talk presents highlights from the most recent version of the course following this iterative process of course design. The 36-hour course provides pre-service teachers with opportunities to explore hands-on-activities and theoretical-based approaches to Computational Thinking and pedagogy in grades 7-12, all within a blended learning context. The researchers will be further studying the pre-service teacher experience and are looking to provide recommendations for other preservice teacher education programs as well as in-service professional development programs.</p>",Lisa Anne Floyd,Sub,10.1145/3328778.3372571,https://doi.org/10.1145/3328778.3372571,,
Lightning Talks,Lightning Talks Session 2,,Lina Battestilli; Jennifer Campbell; Kevin Lin,Session,,,,
Lightning Talks,LT #201: AppConnect NW: A Collaborative Network of Seven Community and Technical College Programs in Software Development,"<p>AppConnect NW is a network of seven community and technical colleges in the Puget Sound region offering applied baccalaureate degrees in software and application development. As the need for qualified developers continues to increase, the AppConnect NW colleges are preparing the next generation of the workforce with the most in-demand skills, technologies, and hands-on project experience. The network is engaging with the Washington Technology Industry Association, regional employers, local high schools, and graduate schools to increase the awareness of applied bachelor's degree pathways and support the local talent pipeline. Faculty collaborate across colleges on industry-driven curriculum that prepares students for careers in technology. The purpose of this lightning talk is to share some of the initial results of the project (year two, out of a four-year project) and to share opportunities for further work in developing similar regional collaboration networks.</p>",Kendrick (Ken) Hang; Brianna Rockenstire; Alexandra Vaschillo,Sub,10.1145/3328778.3372555,https://doi.org/10.1145/3328778.3372555,,
Lightning Talks,LT #202: Examining Language Bias in Computer Science,"<p>This lightning talk will discuss the current efforts to identify and analyze the possibility of language bias in documents, exams, technical interviews, and actual interviews used in computer science as contributing factors in the continued lack of participation/success of underrepresented populations in computers science despite extensive efforts to develop a more inclusive environment. Although many factors have been examined while attempting to explain the continued lack of participation/success of under-represented populations in computer science, language bias in the very instruments that are used to measure success and entry does not seem to be among the forefront of these endeavors. This work is inspired by previous work done to examine biased language based upon neutral point of view (NPOV) revisions done on Wikipedia pages and seeks to apply similar methodologies to computer science instruments of evaluation in order to determine if there may indeed be a subtle and unconscious language bias within them.</p>",Catherine Tabor,Sub,10.1145/3328778.3372556,https://doi.org/10.1145/3328778.3372556,,
Lightning Talks,LT #203: Best Practices for Reviewing Material at the Beginning of a Semester,"<p>This lightning talk describes three different styles of beginning of semester review and a study designed to show which styles are more or less effective. An initial study comparing traditional review and traditional review with the addition of an educational video game was completed with 33 subjects in three classes. The study found that students showed more confidence on specific tasks, such as recursion, and improved their answers for questions on those topics after playing the game during their review. However, the students who played the game were less confident, compared to their peers, in their overall ability in computer science. For more reliable results a second study should be run with more participants. While the initial research focused on review with and without game play incorporated into the review, a second study would split the first condition in two, review with and without additional practice problems. Faculty who might be interested in participating this research by collecting data in their classes or collaborating with the proposer to develop the second study should email the proposer. </p>",Ariel Webster; Jared Segal,Sub,10.1145/3328778.3372559,https://doi.org/10.1145/3328778.3372559,,
Lightning Talks,LT #204: Software Engineering for Data Scientists,"<p>Software is one of the three key pillars in the emerging field of data science, the other two being statistics and domain knowledge. With software engineering having matured into a full-fledged discipline, can it inform data science projects through its extensive knowledgebase? Data scientists of today are experiencing what software engineers experienced around 1970s. We are at the cusp of a new era with many promising opportunities, but we have yet to find a process-centric approach that could guide our data science ventures.</p><p>Software development methodologies evolved from a structured waterfall to an iterative exploration. They transitioned from trying to create products that are built-to-last to products that are built-to-change. Data science projects, coming from the other end of the spectrum, need to shift from being ever-changing short-lived experiments to long-term sustainable organizational capabilities without losing the ability to explore and adapt. To make this shift, software engineers need to re-articulate their learning in the context of the emerging data science paradigm. Software engineering needs to develop its data science lens.
 
 </p><p>Many tools such as programming languages, database systems, and infrastructural platforms are common across the two worlds, so which of the underlying principles can benefit data scientists? These are the questions that will be explored in this talk and those interested in joining this exploration are welcome to share their thoughts.</p>",Neelam Dwivedi,Sub,10.1145/3328778.3372558,https://doi.org/10.1145/3328778.3372558,https://youtu.be/hTEiz07iAsw,https://drive.google.com/open?id=1eDra5L9419BYiPQrqTCKbpkIScKsRegW
Lightning Talks,LT #205: Using Self-Efficacy Surveys as a Tool for Student Reflection,"<p>This lightning talk will describe how we have introduced self-efficacy surveys into an object-oriented programming course with the goal of encouraging reflection and positive learning behaviors on the part of our students. Self-efficacy surveys such as the Motivated Strategies for Learning Questionnaire (MSLQ) are frequently used to quantify the effect of pedagogical innovations on student learning. This is motivated by an understanding that a positive attitude of self-efficacy can lead to improved student retention and outcomes. Some authors have also written about the benefits of measuring self-efficacy to help instructors better support individual students. We conjectured that asking students to reflect on their own sense of self-efficacy could help students make positive choices about their learning behaviors. For the past two semesters we have deployed a self-efficacy survey at the start of the course and at midterm - two natural points for students to consider how they are approaching their coursework. Students assess elements of their own self-efficacy as well as answer open-ended questions about actions they can take to support their learning and barriers they are concerned may get in the way of their learning. We will present our survey, describe how it is used in the course, and discuss some initial positive effects we have observed.</p>",Amanda Holland-Minkley,Sub,10.1145/3328778.3372564,https://doi.org/10.1145/3328778.3372564,,
Lightning Talks,LT #207: Accruing Interest: What Experiences Contribute to Students Developing a Sustained Interest in Computer Science Over Time?,"<p>This lightning talk describes a new grant-funded research project investigating how undergraduate computer science students' interest in CS develops. The goal of this project is to investigate how sustained, individual interest develops from finer-grained experiences of situational interest that students have in introductory CS courses. This project will accomplish this goal using the experience sampling method (Hektner, Schmidt, & Csikszentmihalyi, 2007), which is a longitudinal research method that asks participants to report on their immediate experiences at many occasions. Prior research has not adequately investigated what drives individual differences in CS interest at the level at which policymakers and educators can most effectively act, namely, at a situation-to-situation level, rather than in terms of what happens in courses, programs of study, or occupations in general and overall. Moreover, research has shown that some overall factors, such as competence-related beliefs and co-curricular supports, might be related to the development of sustained interest in CS (e.g., Lishinski, Yadav, Good, & Enbody, 2016). Thus, we will explore how students' initial interest, as well as their individual motivational characteristics, such as CS self-concept, and CS self-efficacy, relate to interest at a situation-to-situation level. Furthermore, we will also explore how contextual factors - those internal to students, such as how challenging they found the activities, as well as those external to students, such as the focus of each class - relate to students' situational interest. Overall, we hope to better understand how students' situational interest relates to changes in their longer-term, individual interest.</p>",Alex Lishinski; Joshua Rosenberg,Sub,10.1145/3328778.3372568,https://doi.org/10.1145/3328778.3372568,,
Lightning Talks,"LT #208: Evaluating 10 Years of Girls Only Computing Camps: Impacts, Lessons Learned and a New Future Direction","<p>For many years, summer computing camps have been offered as a means to attract girls and underrepresented groups to computing. This lightning talk describes the current effort to assess the return on investment for a girls only summer computing camp program offered for ten years at a Midwestern university in the U.S. In the 9th year of the program, the sponsoring college observed changing trends that suggested a need to evaluate the program's short and long term impacts and either discontinue the program or develop a new approach for the future.</p>
<p>In this, the 11th year since the program started, a review team has been formed to 1) evaluate enrollment and retention numbers from years one through 10, 2) evaluate demographic trends among the girls who participated in the program, 3) review annual pre- and post-camp camper surveys to assess interim impacts, and 4) track campers' current school and/or career status (through a combination of alumni surveys and university enrollment records) to identify long term impacts. Following this initial assessment, the review team will compare program recruitment and retention processes to similar programs and organizations and more recent research-based developments in diversity-focused programs and outreach. The ultimate goal of this project is to move beyond summer computing camps to a more effective approach to recruiting more women and underrepresented groups to the computing field. We will share our 10-year results, lessons learned and suggestions for future efforts in this area and gather audience feedback.</p>",Christina N. Outlay,Sub,10.1145/3328778.3372570,https://doi.org/10.1145/3328778.3372570,,
Lightning Talks,LT #209: Making Undergrad Research Required at the CS Freshmen Level as an Equity-Minded HIP,"<p>This lightning-talk will discuss our novel work towards making undergraduate research a required part of our CS freshmen classes as a High-Impact-Practice (HIP) activity. We have developed a nifty undergrad-scholarly-creative-activity (URSCA) as a mandatory assignment for CS freshmen in this pilot experiment. We are investigating whether undergrad research can be included in an equitable and inclusive manner at the freshmen level so that it is accessible to all students for enhanced learning, better experience and more impactful professional development. Thus, this project is an initiative towards bringing URSCA to CS freshmen in a user-friendly and accessible form, so that the opportunity to taste URSCA is not limited to a few i.e. only the talented, self-motivated and selected CS students. The goal of this project is to discover a user-friendly and an equity-focused way for exposing CS freshmen to the essence of URSCA, which includes understanding the notion of a research-question, how to read and analyze research-articles, how to identify research-questions and think out-of-the-box, and how to develop writing-skills. Our innovative URSCA-HIP assignment has been designed as a team project for CS freshmen, with each team being assigned a senior CS student as a peer research mentor. We are collecting survey-data from the freshmen research-mentees and their corresponding senior research-mentors in order to evaluate our unique URSCA-HIP experiential-learning model, and gauge its overall efficacy. To our knowledge, this is a first-of-its-kind initiative of engaging CS freshmen in an inclusive, equity-focused URSCA-HIP experience through a user-friendly but required class project.</p>",Ankur Chattopadhyay; Kevin Grondahl; Sherry Verdon,Sub,10.1145/3328778.3372573,https://doi.org/10.1145/3328778.3372573,,
Lightning Talks,LT #210: The World's Fastest Fractal Drawing Program!,"<p>Many of us use fractals (e.g., C-Curve) and the Fibonacci sequence to teach recursion to our students. We show that the na&iuml;ve recursive implementations of them have exponential running time. However, while we all explain that the Fibonacci sequence can be computed in linear time, how many of us show that completely self-similar fractals can also be created in linear time?</p>
<p>Snap! is a blocks-based programming environment with a hidden and magical feature - the ability to save pen trails (i.e., the lines that the turtle-geometry sprite has drawn on the screen) into a single ""costume"", which can later be ""stamped"" onto the stage at an arbitrary position, orientation and size. Stamping takes constant time, regardless of the complexity of the pen trails that have been saved. This allows a sprite to draw a complicated picture once, save it as a pen trail, and simply stamp it over and over again, rather than redraw it.</p>
<p>We have created ""the world's fastest fractal drawing program"", which makes use of this feature, & can draw the C-Curve fractal at level 40 (with over 1 trillion ""lines"") in a fraction of a second; the speed is quite startling! We encourage you to see it for yourself: https://tinyurl.com/SIGCSE2020WorldsFastestFractal</p>
<p>In this lightning talk, we'll show our program, explain how it works, encourage educators to teach this new approach with Fractals, and challenge everyone to ""think out of the box"" when approaching problems that may have previously seemed intractable.</p>",Dan Garcia,Sub,10.1145/3328778.3372572,https://doi.org/10.1145/3328778.3372572,https://youtu.be/0om8Rojo-Vo,
